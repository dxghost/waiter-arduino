;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/29/2020
;Author  : M
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <stdio.h>
;#include <delay.h>
;
;// Declare your global variables here
;#define Rows PORTC   //Pc0,pc1,pc2,pc3
;#define Columns PIND //PD4,PD5,PD6
;
;unsigned char upperNibble, keyCode, keyPressed,k;
;unsigned char orderedItem[20];
;
;char press_key()
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028     unsigned char i;
; 0000 0029     DDRC = 0x0f;
;PCODE: $0000000F VOL: 0
;	i -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002A     PORTC = 0x0f;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002B     PORTD = 0xf0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002C     k = 1;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002D     while (k == 1)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002E     {
; 0000 002F 
; 0000 0030         upperNibble = 0xff;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0031 
; 0000 0032         for (i = 0; i < 4; i++)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0033         {
; 0000 0034             delay_ms(1);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0035             Rows = ~(0x01 << i);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0036             delay_ms(1);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0037             upperNibble = Columns | 0x0f;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0038 
; 0000 0039             if (upperNibble != 0xff)
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003A             {
; 0000 003B                 delay_ms(20); //key debouncing delay
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003C                 upperNibble = Columns | 0x0f;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003D                 if (upperNibble == 0xff)
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003E                     goto OUT;
;PCODE: $00000041 VOL: 0
; 0000 003F 
; 0000 0040                 keyCode = (upperNibble & 0xf0) | (0x0f & ~(0x01 << i));
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0041 
; 0000 0042                 while (upperNibble != 0xff)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0043                     upperNibble = Columns | 0x0f;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0045 delay_ms(20);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0046 
; 0000 0047                 switch (keyCode)
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0048                 {
; 0000 0049                 case (0xee):
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004A                     keyPressed = '1';
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 004B                     k = 0;
;PCODE: $0000005F VOL: 0
; 0000 004C                     break;
;PCODE: $00000060 VOL: 0
; 0000 004D                 case (0xed):
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004E                     keyPressed = '4';
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 004F                     k = 0;
;PCODE: $00000066 VOL: 0
; 0000 0050                     break;
;PCODE: $00000067 VOL: 0
; 0000 0051                 case (0xeb):
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0052                     keyPressed = '7';
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0053                     k = 0;
;PCODE: $0000006D VOL: 0
; 0000 0054                     break;
;PCODE: $0000006E VOL: 0
; 0000 0055                 case (0xe7):
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0056                     keyPressed = '*';
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0057                     k = 0;
;PCODE: $00000074 VOL: 0
; 0000 0058                     break;
;PCODE: $00000075 VOL: 0
; 0000 0059                 case (0xde):
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 005A                     keyPressed = '2';
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 005B                     k = 0;
;PCODE: $0000007B VOL: 0
; 0000 005C                     break;
;PCODE: $0000007C VOL: 0
; 0000 005D                 case (0xdd):
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 005E                     keyPressed = '5';
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 005F                     k = 0;
;PCODE: $00000082 VOL: 0
; 0000 0060                     break;
;PCODE: $00000083 VOL: 0
; 0000 0061                 case (0xdb):
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0062                     keyPressed = '8';
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0063                     k = 0;
;PCODE: $00000089 VOL: 0
; 0000 0064                     break;
;PCODE: $0000008A VOL: 0
; 0000 0065                 case (0xd7):
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0066                     keyPressed = '0';
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0067                     k = 0;
;PCODE: $00000090 VOL: 0
; 0000 0068                     break;
;PCODE: $00000091 VOL: 0
; 0000 0069                 case (0xbe):
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 006A                     keyPressed = '3';
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 006B                     k = 0;
;PCODE: $00000097 VOL: 0
; 0000 006C                     break;
;PCODE: $00000098 VOL: 0
; 0000 006D                 case (0xbd):
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 006E                     keyPressed = '6';
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 006F                     k = 0;
;PCODE: $0000009E VOL: 0
; 0000 0070                     break;
;PCODE: $0000009F VOL: 0
; 0000 0071                 case (0xbb):
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0072                     keyPressed = '9';
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0073                     k = 0;
;PCODE: $000000A5 VOL: 0
; 0000 0074                     break;
;PCODE: $000000A6 VOL: 0
; 0000 0075                 case (0xb7):
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0076                     keyPressed = '#';
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0077                     k = 0;
;PCODE: $000000AC VOL: 0
; 0000 0078                     break;
;PCODE: $000000AD VOL: 0
; 0000 0079                 case (0x7e):
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 007A                     keyPressed = '/';
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 007B                     k = 0;
;PCODE: $000000B3 VOL: 0
; 0000 007C                     break;
;PCODE: $000000B4 VOL: 0
; 0000 007D                 case (0x7d):
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 007E                     keyPressed = 'X';
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 007F                     k = 0;
;PCODE: $000000BA VOL: 0
; 0000 0080                     break;
;PCODE: $000000BB VOL: 0
; 0000 0081                 case (0x7b):
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0082                     keyPressed = '-';
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0083                     k = 0;
;PCODE: $000000C1 VOL: 0
; 0000 0084                     break;
;PCODE: $000000C2 VOL: 0
; 0000 0085                 case (0x77):
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0086                     keyPressed = '+';
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0087                     k = 0;
;PCODE: $000000C8 VOL: 0
; 0000 0088                     break;
;PCODE: $000000C9 VOL: 0
; 0000 0089                 default:
;PCODE: $000000CA VOL: 0
; 0000 008A                     keyPressed = 'X';
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 008B                     k = 0;
;PCODE: $000000CD VOL: 0
; 0000 008C                 }
;PCODE: $000000CE VOL: 0
; 0000 008D             OUT:;
;PCODE: $000000CF VOL: 0
; 0000 008E             }
; 0000 008F         }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0090     }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0091     return keyPressed;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0092 }
;PCODE: $000000DB VOL: 0
;
;unsigned char* menuItem(char keyPressed){
; 0000 0094 unsigned char* menuItem(char keyPressed){
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0095     switch(keyPressed){
;PCODE: $000000DE VOL: 0
;	keyPressed -> Y+0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0096         case ('1'):
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0097             return char* "Pizza!";
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0098             break;
;PCODE: $000000E8 VOL: 0
; 0000 0099         default:
;PCODE: $000000E9 VOL: 0
; 0000 009A             return "404 n";
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 009B     }
;PCODE: $000000EE VOL: 0
; 0000 009C     return "404";
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 009D }
;PCODE: $000000F3 VOL: 0
;
;void main(void)
; 0000 00A0 {
;PCODE: $000000F4 VOL: 0
; 0000 00A1 // Declare your local variables here
; 0000 00A2 
; 0000 00A3 // Input/Output Ports initialization
; 0000 00A4 // Port B initialization
; 0000 00A5 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A6 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00A7 PORTB=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00A8 DDRB=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00A9 
; 0000 00AA // Port C initialization
; 0000 00AB // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00AC // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00AD PORTC=0x00;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00AE DDRC=0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00AF 
; 0000 00B0 // Port D initialization
; 0000 00B1 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00B2 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00B3 PORTD=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00B4 DDRD=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00B5 
; 0000 00B6 // Timer/Counter 0 initialization
; 0000 00B7 // Clock source: System Clock
; 0000 00B8 // Clock value: Timer 0 Stopped
; 0000 00B9 TCCR0=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00BA TCNT0=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00BB 
; 0000 00BC // Timer/Counter 1 initialization
; 0000 00BD // Clock source: System Clock
; 0000 00BE // Clock value: Timer1 Stopped
; 0000 00BF // Mode: Normal top=0xFFFF
; 0000 00C0 // OC1A output: Discon.
; 0000 00C1 // OC1B output: Discon.
; 0000 00C2 // Noise Canceler: Off
; 0000 00C3 // Input Capture on Falling Edge
; 0000 00C4 // Timer1 Overflow Interrupt: Off
; 0000 00C5 // Input Capture Interrupt: Off
; 0000 00C6 // Compare A Match Interrupt: Off
; 0000 00C7 // Compare B Match Interrupt: Off
; 0000 00C8 TCCR1A=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00C9 TCCR1B=0x00;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00CA TCNT1H=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00CB TCNT1L=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00CC ICR1H=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00CD ICR1L=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00CE OCR1AH=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00CF OCR1AL=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00D0 OCR1BH=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00D1 OCR1BL=0x00;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00D2 
; 0000 00D3 // Timer/Counter 2 initialization
; 0000 00D4 // Clock source: System Clock
; 0000 00D5 // Clock value: Timer2 Stopped
; 0000 00D6 // Mode: Normal top=0xFF
; 0000 00D7 // OC2 output: Disconnected
; 0000 00D8 ASSR=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00D9 TCCR2=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00DA TCNT2=0x00;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00DB OCR2=0x00;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00DC 
; 0000 00DD // External Interrupt(s) initialization
; 0000 00DE // INT0: Off
; 0000 00DF // INT1: Off
; 0000 00E0 MCUCR=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00E1 
; 0000 00E2 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00E3 TIMSK=0x00;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00E4 
; 0000 00E5 // USART initialization
; 0000 00E6 // USART disabled
; 0000 00E7 UCSRB=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00E8 
; 0000 00E9 // Analog Comparator initialization
; 0000 00EA // Analog Comparator: Off
; 0000 00EB // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00EC ACSR=0x80;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00ED SFIOR=0x00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00EE 
; 0000 00EF // ADC initialization
; 0000 00F0 // ADC disabled
; 0000 00F1 ADCSRA=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00F2 
; 0000 00F3 // SPI initialization
; 0000 00F4 // SPI disabled
; 0000 00F5 SPCR=0x00;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00F6 
; 0000 00F7 // TWI initialization
; 0000 00F8 // TWI disabled
; 0000 00F9 TWCR=0x00;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00FA 
; 0000 00FB // Alphanumeric LCD initialization
; 0000 00FC // Connections are specified in the
; 0000 00FD // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00FE // RS - PORTB Bit 4
; 0000 00FF // RD - PORTB Bit 5
; 0000 0100 // EN - PORTB Bit 6
; 0000 0101 // D4 - PORTB Bit 0
; 0000 0102 // D5 - PORTB Bit 1
; 0000 0103 // D6 - PORTB Bit 2
; 0000 0104 // D7 - PORTB Bit 3
; 0000 0105 // Characters/line: 16
; 0000 0106 lcd_init(16);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0107 
; 0000 0108 while (1)
;PCODE: $00000133 VOL: 0
; 0000 0109       {
; 0000 010A       // Place your code here
; 0000 010B       char strbuff[20];
; 0000 010C       char keyPressed = press_key();
; 0000 010D       char* item = menuItem(keyPressed);
; 0000 010E       sprintf(strbuff, "its: %s", orderedItem);
;PCODE: $00000134 VOL: 0
;	strbuff -> Y+3
;	keyPressed -> Y+2
;	*item -> Y+0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 010F 
; 0000 0110       lcd_puts(strbuff);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0111       delay_ms(100);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0112 
; 0000 0113       }
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0114 }
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;
