
waiter-avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000172  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092a  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000665  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036f  00000000  00000000  0000124b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f7  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001cff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  7a:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdcmd>:
	lcddata(data_value1);
}

void lcdcmd(char cmdout)
{
	PORTB=cmdout;
  82:	88 bb       	out	0x18, r24	; 24
	PORTB&=~(1<<rs);
  84:	c2 98       	cbi	0x18, 2	; 24
	PORTB|=(1<<en);
  86:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e9       	ldi	r24, 0x9F	; 159
  8a:	9f e0       	ldi	r25, 0x0F	; 15
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcdcmd+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <lcdcmd+0x10>
  92:	00 00       	nop
	_delay_ms(1);
	PORTB&=~(1<<en);
  94:	c3 98       	cbi	0x18, 3	; 24
  96:	08 95       	ret

00000098 <dis_cmd>:
	dis_cmd(0x06);
	dis_cmd(0x83);
}

void dis_cmd(char cmd_value)
{
  98:	cf 93       	push	r28
  9a:	c8 2f       	mov	r28, r24
	char cmd_value1;
	
	cmd_value1 = cmd_value & 0xF0;		//mask lower nibble because PA4-PA7 pins are used.
	lcdcmd(cmd_value1);			// send to LCD
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	
	cmd_value1 = ((cmd_value<<4) & 0xF0);	//shift 4-bit and mask
	lcdcmd(cmd_value1);			// send to LCD
  a2:	8c 2f       	mov	r24, r28
  a4:	82 95       	swap	r24
  a6:	80 7f       	andi	r24, 0xF0	; 240
  a8:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
}
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <lcd_init>:



void lcd_init()
{
	dis_cmd(0x02);		// to initialize LCD in 4-bit mode.
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	0e 94 4c 00 	call	0x98	; 0x98 <dis_cmd>
	dis_cmd(0x28);
  b6:	88 e2       	ldi	r24, 0x28	; 40
  b8:	0e 94 4c 00 	call	0x98	; 0x98 <dis_cmd>
	dis_cmd(0x0C);
  bc:	8c e0       	ldi	r24, 0x0C	; 12
  be:	0e 94 4c 00 	call	0x98	; 0x98 <dis_cmd>
	dis_cmd(0x06);
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	0e 94 4c 00 	call	0x98	; 0x98 <dis_cmd>
	dis_cmd(0x83);
  c8:	83 e8       	ldi	r24, 0x83	; 131
  ca:	0e 94 4c 00 	call	0x98	; 0x98 <dis_cmd>
  ce:	08 95       	ret

000000d0 <lcddata>:
	PORTB&=~(1<<en);
}

void lcddata(char dataout)
{
	PORTB=dataout;
  d0:	88 bb       	out	0x18, r24	; 24
	PORTB|=(1<<rs);
  d2:	c2 9a       	sbi	0x18, 2	; 24
	PORTB|=(1<<en);
  d4:	c3 9a       	sbi	0x18, 3	; 24
  d6:	8f e9       	ldi	r24, 0x9F	; 159
  d8:	9f e0       	ldi	r25, 0x0F	; 15
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcddata+0xa>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <lcddata+0x10>
  e0:	00 00       	nop
	_delay_ms(1);
	PORTB&=~(1<<en);
  e2:	c3 98       	cbi	0x18, 3	; 24
  e4:	08 95       	ret

000000e6 <dis_data>:
	cmd_value1 = ((cmd_value<<4) & 0xF0);	//shift 4-bit and mask
	lcdcmd(cmd_value1);			// send to LCD
}

void dis_data(char data_value)
{
  e6:	cf 93       	push	r28
  e8:	c8 2f       	mov	r28, r24
	char data_value1;
	
	data_value1=data_value&0xF0;
	lcddata(data_value1);
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	0e 94 68 00 	call	0xd0	; 0xd0 <lcddata>
	
	data_value1=((data_value<<4)&0xF0);
	lcddata(data_value1);
  f0:	8c 2f       	mov	r24, r28
  f2:	82 95       	swap	r24
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	0e 94 68 00 	call	0xd0	; 0xd0 <lcddata>
}
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <dis_print>:
	PORTB|=(1<<en);
	_delay_ms(1);
	PORTB&=~(1<<en);
}

void dis_print(char* p){
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
	while(*p){
 104:	88 81       	ld	r24, Y
 106:	88 23       	and	r24, r24
 108:	31 f0       	breq	.+12     	; 0x116 <dis_print+0x18>
 10a:	21 96       	adiw	r28, 0x01	; 1
		dis_data(*p++);
 10c:	0e 94 73 00 	call	0xe6	; 0xe6 <dis_data>
	_delay_ms(1);
	PORTB&=~(1<<en);
}

void dis_print(char* p){
	while(*p){
 110:	89 91       	ld	r24, Y+
 112:	81 11       	cpse	r24, r1
 114:	fb cf       	rjmp	.-10     	; 0x10c <dis_print+0xe>
		dis_data(*p++);
	}
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <main>:

int main(void)
{
	char* welcome1="Welcome";
	char* welcome2="to our resturant";
	DDRB=0xFF;
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	87 bb       	out	0x17, r24	; 23
	lcd_init();
 120:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_init>
	

	dis_print(welcome1);
 124:	80 e6       	ldi	r24, 0x60	; 96
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 7f 00 	call	0xfe	; 0xfe <dis_print>
	dis_cmd(0xC0);
 12c:	80 ec       	ldi	r24, 0xC0	; 192
 12e:	0e 94 4c 00 	call	0x98	; 0x98 <dis_cmd>
	dis_print(welcome2);
 132:	88 e6       	ldi	r24, 0x68	; 104
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 7f 00 	call	0xfe	; 0xfe <dis_print>
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	80 e7       	ldi	r24, 0x70	; 112
 13e:	92 e0       	ldi	r25, 0x02	; 2
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x24>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x2e>
 14a:	00 00       	nop
void lcdcmd(char);
void lcddata(char);
void dis_print(char*);

int main(void)
{
 14c:	c0 e1       	ldi	r28, 0x10	; 16
 14e:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1)
	{
		for(int x=0;x<16;x++)
		{
			dis_cmd(0x1c);
 150:	8c e1       	ldi	r24, 0x1C	; 28
 152:	0e 94 4c 00 	call	0x98	; 0x98 <dis_cmd>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	89 ef       	ldi	r24, 0xF9	; 249
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x40>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x4a>
 166:	00 00       	nop
 168:	21 97       	sbiw	r28, 0x01	; 1
	dis_print(welcome2);
	_delay_ms(50);
	
	while(1)
	{
		for(int x=0;x<16;x++)
 16a:	91 f7       	brne	.-28     	; 0x150 <main+0x34>
 16c:	ef cf       	rjmp	.-34     	; 0x14c <main+0x30>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
